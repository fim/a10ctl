#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse

import logging
import logging.handlers as handlers
import os
import re
import sys
import time

STATUS={
    0: "Down",
    '0': "Down",
    1: "Up",
    '1': "Up"
}

try:
    import acos_client
except ImportError:
    sys.stderr.write("acos-client library is missing. Exiting...\n")
    sys.exit(1)

# Python2/3 compatibility
try:
    import configparser
except ImportError:
    import ConfigParser as configparser

# Fix annoying httplib logs
import httplib
httplib.HTTPConnection.debuglevel = 0

logger = logging.getLogger(__name__)

class SizedTimedRotatingFileHandler(handlers.TimedRotatingFileHandler):
    """
    Handler for logging to a set of files, which switches from one file
    to the next when the current file reaches a certain size, or at certain
    timed intervals
    """
    def __init__(self, filename, mode='a', maxBytes=0, backupCount=0, encoding=None,
                 delay=0, when='h', interval=1, utc=False):
        # If rotation/rollover is wanted, it doesn't make sense to use another
        # mode. If for example 'w' were specified, then if there were multiple
        # runs of the calling application, the logs from previous runs would be
        # lost if the 'w' is respected, because the log file would be truncated
        # on each run.
        if maxBytes > 0:
            mode = 'a'
        handlers.TimedRotatingFileHandler.__init__(
            self, filename, when, interval, backupCount, encoding, delay, utc)
        self.maxBytes = maxBytes

    def shouldRollover(self, record):
        """
        Determine if rollover should occur.

        Basically, see if the supplied record would cause the file to exceed
        the size limit we have.
        """
        if self.stream is None:                 # delay was set...
            self.stream = self._open()
        if self.maxBytes > 0:                   # are we rolling over?
            msg = "%s\n" % self.format(record)
            self.stream.seek(0, 2)  #due to non-posix-compliant Windows feature
            if self.stream.tell() + len(msg) >= self.maxBytes:
                return 1
        t = int(time.time())
        if t >= self.rolloverAt:
            return 1
        return 0

class CommandNotFound(Exception):
    pass

class A10(object):
    def __init__(self, host, username, password, partition='shared'):
        self.host = host
        self.username = username
        self.password = password
        self.partition = partition
        self.client = acos_client.Client(self.host, acos_client.AXAPI_21,
                self.username, self.password)
        self.set_partition(self.partition)

    def __del__(self):
        self.client.session.close()

    def callMethod(self, command, **args):
        func = getattr(self, command,  None)
        if not func:
            raise CommandNotFound("Command %s is not a valid command" % command)
        fvars = list(func.func_code.co_varnames[:func.func_code.co_argcount])
        fvars.remove('self')
        return func(*map(args.get, fvars))

    def set_partition(self, partition):
        logger.info("Changing active partition to %s" % partition)
        self.client.system.partition.active(partition)
        self.partition = partition

    def server_list(self, nfilter=None):
        logger.info("Listing configured servers [filter: %s]" % nfilter)
        servers = []
        for server in sorted(self.client.slb.server.all()['server_list'],key=lambda k: k['name']):
            if nfilter and not re.match(nfilter, server['name']):
                continue
            servers.append(server)
            logger.info(" %s [%s:%s]:\t%s" %(server['name'],
                server['host'], "{%s}" % ",".join([ str(p['port_num']) for p in
                    server['port_list']]),
                    STATUS[server['status']]))

        return servers

    def server_backup(self, filename):
        logger.info("Backing up configuration for server %s into %s" %
                (self.host, filename))
        if os.path.exists(os.path.expanduser(filename)):
            raise Exception("Backup file already exists. Skipping operation!")

        with open(filename, 'wb') as f:
            f.write(self.client.system.backup())
            f.flush()

    def add_server(self, **kwargs):
        logger.error("Not implemented")

    def del_server(self, **kwargs):
        logger.error("Not implemented")

    def server_up(self, server):
        logger.info("Marking server %s as UP" % server)
        server_info = self.client.slb.server.get(server)['server']
        return self.client.slb.server.update(server_info['name'],
            server_info['host'], status=1)

    def server_down(self, server):
        logger.info("Marking server %s as DOWN" % server)
        server_info = self.client.slb.server.get(server)['server']
        return self.client.slb.server.update(server_info['name'],
            server_info['host'], status=0)

    def server_stats(self, server, stat=None):
        server_info = self.client.slb.server.get(server)['server']
        server_stats = self.client.slb.server.fetchStatistics(server)['server_stat']

        if stat and not stat in server_stats:
            raise Exception("Unknown statistic name %s" % stat)
        for s in server_stats:
            if s == 'port_stat_list': continue
            if stat and not s == stat:
                continue
            logger.info(" * %s: %s" % (s, server_stats[s]))

        return server_stats

    def server_status(self, server):
        server_info = self.client.slb.server.get(server)['server']
        logger.info("Server %s status: %s" % (
            server,
            STATUS['%s' % server_info['status']]
            ))
        stats = self.client.slb.server.fetchStatistics(server)['server_stat']
        logger.info("Current connection total: %s" % stats['cur_conns'])
        return server_info['status']

# Helper functions
##################

def log_setup(log_file=None):
    formatter = logging.Formatter(
        '%(message)s')
    formatter.converter = time.gmtime  # if you want UTC time
    logger = logging.getLogger()
    if log_file:
        log_handler=SizedTimedRotatingFileHandler(
            log_file, maxBytes=52428800, backupCount=5,
            when='s',interval=86400,
            #encoding='bz2',  # uncomment for bz2 compression
            )
    else:
        log_handler=logging.StreamHandler(sys.stdout)

    log_handler.setFormatter(formatter)
    logger.addHandler(log_handler)
    logger.setLevel(logging.INFO)

    return logger

def parse_arguments(defaults):

    parser = argparse.ArgumentParser(description="Manage servers within A10 load balancers")
    subparsers = parser.add_subparsers(title='subcommands')
    parser.add_argument("-H", "--host", help="The name/ip of the A10",
            type=str)
    parser.add_argument("-u", "--username", help="A10 username",
            type=str, default="admin")
    parser.add_argument("-p", "--password", help="A10 password",
            type=str, default="a10")
    parser.add_argument("-P", "--partition", help="A10 partition",
            type=str, default="shared")
    parser.add_argument("-d", "--debug", help="Enable debugging messages",
            default=False, action="store_true")
    parser.add_argument("-l", "--logfile", help="Specify log file", default=None, type=str)
    parser.add_argument("--traceback", help="Print traces for exceptions",
            default=False, action="store_true")
    parser.set_defaults(**defaults)

    # up
    parser_up = subparsers.add_parser('up', description="Enable an LB server")
    parser_up.add_argument("server", help="The server name")
    parser_up.set_defaults(command='server_up')

    # down
    parser_down = subparsers.add_parser('down', description="Disable an LB server")
    parser_down.add_argument("server", help="The server name")
    parser_down.set_defaults(command='server_down')

    # status
    parser_status = subparsers.add_parser('status', description="Check status of a server")
    parser_status.add_argument("server", help="Server name",
            type=str, default=None)
    parser_status.set_defaults(command='server_status')

    # stats
    parser_stats = subparsers.add_parser('stats', description="Check statistics for a server")
    parser_stats.add_argument("server", help="The server name")
    parser_stats.add_argument("stat", help="Stat to retrieve", nargs="?",
            type=str)
    parser_stats.set_defaults(command='server_stats')

    # list
    parser_list = subparsers.add_parser('list', description="List servers")
    parser_list.add_argument("nfilter", help="Regex filter for server names",
            default=None, nargs="?", type=str)
    parser_list.set_defaults(command='server_list')

    # backup
    parser_backup = subparsers.add_parser('backup', description="List servers")
    parser_backup.add_argument("filename", help="Name of the backup file",
            default="system_backup_%s.tar.gz" % time.strftime("%Y%m%d-%H%M%S"),
            nargs="?", type=str)
    parser_backup.set_defaults(command='server_backup')

    return parser

# Script Logic
##############

if __name__ == "__main__":
    """ Error codes:
    * 0: OK
    * 1: Exception was thrown
    """
    confp = argparse.ArgumentParser(add_help=False)
    confp.add_argument("-c", "--config", metavar="FILE",
         default=None, help="configuration file")
    cargs, remaining_argv = confp.parse_known_args()
    defaults = {}
    if cargs.config:
        try:
            rawconf = open(os.path.expanduser(cargs.config), 'r')
            config = configparser.ConfigParser()
            config.readfp(rawconf)
            defaults = dict(config.items('root'))
        except Exception as e:
            sys.stderr.write("Warning: Couldn't parse config file %s: %s\n" % (
                cargs.config, e))
            sys.exit(1)

    parser = parse_arguments(defaults)
    args = parser.parse_args(remaining_argv)

    if not args.host or not args.command:
        parser.error("No hosts specified")
        sys.exit()

    # Fix annoying loggers from requests/acos_client
    for l in logging.getLogger().manager.loggerDict:
        mlog = logging.getLogger(l)
        mlog.setLevel(logging.ERROR)
        mlog.propagate = False

    logging.getLogger("acos_client").setLevel(logging.ERROR)
    logger = log_setup(args.logfile)

    if args.debug:
        logger.setLevel(logging.DEBUG)

    try:
        a10 = A10(host=args.host, username=args.username,
                password=args.password, partition=args.partition)
        rc = a10.callMethod(**vars(args))
    except CommandNotFound as e:
        parser.error("Command %s is not valid" % args.command)
        sys.exit(1)
    except Exception as e:
        logger.error(e, exc_info=args.traceback)
        sys.exit(1)
